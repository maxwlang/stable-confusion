import { Interaction } from "discord.js"
import { isEmpty, isNil } from "ramda"
import { Bot } from '../bot'
import { addedToInstantQueue, addedToQueue } from "../embeds/addedToQueue"
import imageSelectPrompt from '../embeds/imageSelectPrompt'
import { BotEvent, QueueItems } from '../types'

const botEvent: BotEvent = {
    name: 'Button Handler - Imagine Variant Of',
    event: 'interactionCreate',
    once: false,
    async execute(bot: Bot, interaction: Interaction) {
        if (!interaction.isButton() && !interaction.isSelectMenu()) return

        // Handle selection
        if (interaction.customId === 'image-select-prompt-variant' && interaction.isSelectMenu()) {
            const referenceQueueItem = bot.findLatestQueueItemReferenceByMessageSnowflake(interaction.message.id)
            if (isNil(referenceQueueItem) || isNil(referenceQueueItem.imageData) || isEmpty(referenceQueueItem.imageData)) {
                await interaction.reply({
                    ephemeral: true,
                    content: 'There is no reference of this image generation. Most likely, this generation is too old to modify.'
                })
                return
            }

            if (interaction.user.id !== referenceQueueItem.discordCallerSnowflake) {
                await interaction.reply({
                    ephemeral: true,
                    content: 'You can not modify content generated by other users.'
                })
    
                return
            }
            
            const [selectedImage] = interaction.values

            // Ensure PNG
            const selectedImageB64 = `data:image/png;base64,${referenceQueueItem.imageData[+selectedImage].toString('base64')}`

            const queueItem = new QueueItems.VariantQueueItem.VariantQueueItem({
                discordCallerSnowflake: interaction.user.id.toString(),
                discordInteraction: interaction,
                discordMessageSnowflake: interaction.message.id,
                height: referenceQueueItem.height,
                width: referenceQueueItem.width,
                initImage: selectedImageB64,
                mask: referenceQueueItem.mask,
                guidanceScale: referenceQueueItem.guidanceScale,
                numInferenceSteps: referenceQueueItem.numInferenceSteps,
                prompt: referenceQueueItem.prompt,
            })
            
            // Remove old attachment
            await interaction.message.removeAttachments()
       
            if (bot.stableDiffusion.isProcessing() || bot.hasQueue()) {
                const queuePos = bot.addQueuedQueueItem(queueItem)
                await queueItem.discordInteraction.editReply({
                    embeds: addedToQueue(queueItem, queuePos).embeds,
                    components: []
                })
            } else {
                bot.addQueuedQueueItem(queueItem)
                await queueItem.discordInteraction.editReply({
                    embeds: addedToInstantQueue(queueItem).embeds,
                    components: []
                })
            }

        // Handle button invoke
        } else if (interaction.customId === 'button-imagine-result-variant-of' && interaction.isButton()) {
            const referenceQueueItem = bot.findLatestQueueItemReferenceByMessageSnowflake(interaction.message.id)
            if (isNil(referenceQueueItem)) {
                await interaction.reply({
                    ephemeral: true,
                    content: 'There is no reference of this image generation. Most likely, this generation is too old to modify.'
                })
                return
            }

            await interaction.deferUpdate() // We defer the update here because we'll update the queueItem interaction instead.

            const imageSelectPromptEmbed = imageSelectPrompt(referenceQueueItem)

            await referenceQueueItem.discordInteraction.editReply({
                embeds: imageSelectPromptEmbed.embeds,
                components: imageSelectPromptEmbed.components
            })
        }
        return
    }
}

export default botEvent
