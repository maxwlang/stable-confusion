import { AttachmentBuilder, Interaction } from "discord.js"
import { isEmpty, isNil } from "ramda"
import { Bot } from '../bot'
import imageResult from "../embeds/imageResult"
import imageSelectPrompt from "../embeds/imageSelectPrompt"
import { BotEvent, QueueItems } from '../types'


const botEvent: BotEvent = {
    name: 'Button Handler - Imagine Upscale',
    event: 'interactionCreate',
    once: false,
    async execute(bot: Bot, interaction: Interaction) {
        if (!interaction.isButton() && !interaction.isSelectMenu()) return
        if (interaction.customId !== 'button-imagine-result-upscale' && !interaction.customId.startsWith('image-select-prompt-upscaled')) return

        const referenceQueueItem = bot.findLatestQueueItemReferenceByMessageSnowflake(interaction.message.id)

        if (isNil(referenceQueueItem) || isNil(referenceQueueItem.imageData) || isEmpty(referenceQueueItem.imageData)) {
            await interaction.reply({
                ephemeral: true,
                content: 'There is no reference of this image generation. Most likely, this generation is too old to modify.'
            })
            return
        }
        
        // Handle image select prompt result
        if (interaction.customId === `image-select-prompt-upscaled-${referenceQueueItem.uuid}` && interaction.isSelectMenu()) {

            if (interaction.user.id !== referenceQueueItem.discordCallerSnowflake) {
                await interaction.reply({
                    ephemeral: true,
                    content: 'You can not modify content generated by other users.'
                })
    
                return
            }
            
            // We can cheat here, we don't really need to generate anything. We just take the image out of the collage.
            // Maybe we add ai upscaling here in the future?
            const [selectedImage] = interaction.values
            const imageResultEmbed = imageResult(referenceQueueItem)

            const file = new AttachmentBuilder(referenceQueueItem.imageData[+selectedImage], {
                name: `stable-confusion_${referenceQueueItem.uuid}_upscaled.jpeg`,
                description: referenceQueueItem.prompt
            })

            await referenceQueueItem.discordInteraction.editReply({
                embeds: imageResultEmbed.embeds,
                components: imageResultEmbed.components,
                files: [file]
            })

        // Handle button invoke
        } else if (interaction.customId === 'button-imagine-result-upscale' && interaction.isButton()) {
            await interaction.deferUpdate() // We defer the update here because we'll update the queueItem interaction instead.

            // Create an UpscaledQueueItem
            const upscaledQueueItem = new QueueItems.UpscaledQueueItem.UpscaledQueueItem({
                discordCallerSnowflake: interaction.user.id.toString(),
                discordInteraction: interaction,
                discordMessageSnowflake: interaction.message.id,
                height: referenceQueueItem.height,
                width: referenceQueueItem.width,
                initImage: referenceQueueItem.initImage,
                mask: referenceQueueItem.mask,
                guidanceScale: referenceQueueItem.guidanceScale,
                numInferenceSteps: referenceQueueItem.numInferenceSteps,
                prompt: referenceQueueItem.prompt,
                promptStrength: referenceQueueItem.promptStrength,
                seed: referenceQueueItem.seed
            })

            upscaledQueueItem.imageData = referenceQueueItem.imageData

            // Convert existing queueitem to UpscaledQueueItem
            bot.updateQueueItem(queueItem => {
                upscaledQueueItem.inheritUUIDFromQueueItem(queueItem, bot)
                upscaledQueueItem.discordMessageSnowflake = queueItem.discordMessageSnowflake
                return upscaledQueueItem
            }, referenceQueueItem.uuid)

            // Send image select prompt
            const imageSelectPromptEmbed = imageSelectPrompt(upscaledQueueItem)
            await referenceQueueItem.discordInteraction.editReply({
                embeds: imageSelectPromptEmbed.embeds,
                components: imageSelectPromptEmbed.components
            })
        }
        return
    }
}

export default botEvent
